_rbenv () 
{ 
    COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    if [ "$COMP_CWORD" -eq 1 ]; then
        COMPREPLY=($(compgen -W "$(rbenv commands)" -- "$word"));
    else
        local words=("${COMP_WORDS[@]}");
        unset words[0];
        unset words[$COMP_CWORD];
        local completions=$(rbenv completions "${words[@]}");
        COMPREPLY=($(compgen -W "$completions" -- "$word"));
    fi
}
bocmacmini () 
{ 
    bocurl='108.190.128.128';
    me='git';
    ssh $me@$bocurl
}
codepoint () 
{ 
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    echo
}
dataurl () 
{ 
    echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}
diff () 
{ 
    git diff --no-index --color-words "$@"
}
digga () 
{ 
    dig +nocmd "$1" any +multiline +noall +answer
}
escape () 
{ 
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    echo
}
folderName () 
{ 
    dest=$PWD;
    f="${dest##*/}";
    echo "${f}"
}
forceLocal () 
{ 
    dest=$PWD".git";
    f="${dest##*/}";
    git ls-remote --get-url ssh://git@192.168.1.10/Users/git/${f};
    if [ "$?" -ne 0 ]; then
        git remote -v;
        echo failed to read remote;
        makeRemote;
        forceOrigin;
    else
        echo succeeded to read;
        echo adding "local" deepspace repository;
        git remote add deepspace ssh://git@192.168.1.10/Users/git/${f};
        echo setting remote url;
        git remote set-url --origin ssh://git@192.168.1.10/Users/git/${f};
        git remote -v;
    fi;
    git ls-remote --get-url https://github.com/randymcmillan/${f};
    if [ "$?" -ne 0 ]; then
        git remote -v;
        echo failed to read remote;
        makeRemote;
        forceOrigin;
    else
        echo succeeded to read;
        echo adding remote github repository;
        git remote add github https://github.com/randymcmillan/${f};
        echo setting remote url;
        git remote set-url --addurl local ssh://git@192.168.1.10/Users/git/${f};
        git remote -v;
    fi
}
forceOrigin () 
{ 
    dest=$PWD".git";
    f="${dest##*/}";
    git ls-remote --get-url ssh://git@173.65.226.216/Users/git/${f};
    if [ "$?" -ne 0 ]; then
        git remote -v;
        echo failed to read remote;
        makeRemote;
        forceOrigin;
    else
        echo succeeded to read;
        echo adding remote deepspace repository;
        git remote add deepspace ssh://git@173.65.226.216/Users/git/${f};
        echo setting remote url;
        git remote set-url --origin ssh://git@173.65.226.216/Users/git/${f};
        git remote -v;
    fi;
    git ls-remote --get-url https://github.com/randymcmillan/${f};
    if [ "$?" -ne 0 ]; then
        git remote -v;
        echo failed to read remote;
        makeRemote;
        forceOrigin;
    else
        echo succeeded to read;
        echo adding remote github repository;
        git remote add github https://github.com/randymcmillan/${f};
        echo setting remote url;
        git remote set-url --addurl origin ssh://git@173.65.226.216/Users/git/${f};
        git remote -v;
    fi
}
gurl () 
{ 
    curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}
httpcompression () 
{ 
    encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}
json () 
{ 
    if [ -p /dev/stdin ]; then
        python -mjson.tool | pygmentize -l javascript;
    else
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    fi
}
makeRemote () 
{ 
    dest=$PWD".git";
    f="${dest##*/}";
    ssh git@173.65.226.216 "git init --bare ${f}"
}
md () 
{ 
    mkdir -p "$@" && cd "$@"
}
myfunc () 
{ 
    myresult='some value'
}
parse_git_branch () 
{ 
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}
parse_git_dirty () 
{ 
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
pipeTree () 
{ 
    ls -R1 /path | while read l; do
        case $l in 
            *:)
                d=${l%:}
            ;;
            "")
                d=
            ;;
            *)
                echo "$d/$l"
            ;;
        esac;
    done
}
randymcmillan () 
{ 
    rmurl='siteground168.com';
    me='randymcm';
    ssh $me@$rmurl -p 18765
}
rbenv () 
{ 
    local command;
    command="$1";
    if [ "$#" -gt 0 ]; then
        shift;
    fi;
    case "$command" in 
        rehash | shell)
            eval "$(rbenv "sh-$command" "$@")"
        ;;
        *)
            command rbenv "$command" "$@"
        ;;
    esac
}
reportMacAddress () 
{ 
    ifconfig en0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
}
rootsinrecovery () 
{ 
    rmurl='siteground138.com';
    me='rootsinr';
    ssh $me@$rmurl -p 18765
}
server () 
{ 
    local port="${1:-8000}";
    open "http://localhost:${port}/";
    python -c 'import SimpleHTTPServer;
map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;
map[""] = "text/plain";
for key, value in map.items():
	map[key] = value + ";charset=UTF-8";
SimpleHTTPServer.test();' "$port"
}
spoof () 
{ 
    openssl rand -hex 1 | tr '[:lower:]' '[:upper:]' | xargs echo 'obase=2;ibase=16;' | bc | cut -c1-6 | sed 's/$/00/' | xargs echo 'obase=16;ibase=2;' | bc | sed 's/$/:0A:8A:A8:63:63/' | xargs sudo ifconfig en0 ether;
    reportMacAddress
}
testRemote () 
{ 
    dest=$PWD".git";
    echo $dest;
    f="${dest##*/}";
    git ls-remote ssh://git@173.65.226.216/Users/git/${f} >&-;
    if [ "$?" -ne 0 ]; then
        echo "[ERROR] Unable to read from " git ls-remote ssh://git@173.65.226.216/Users/git/${f};
    else
        return "$?";
    fi
}
unidecode () 
{ 
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    echo
}
x2go () 
{ 
    open /opt/homebrew-cask/Caskroom/x2goclient/latest/./x2goclient.app
}
